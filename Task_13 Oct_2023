#@@@# Explain the difference between the = operator and the == operator in Python

# In Python, the = operator and the == operator serve two very different purposes:
#
# = Operator (Assignment Operator):
#
# The = operator is used for variable assignment. It assigns a value to a variable.
# When you use =, you are telling Python to store the value on the right-hand side of the operator in the variable on the left-hand side.
# Example:
# python
# Copy code
# x = 5  # Assigns the value 5 to the variable x
# == Operator (Equality Operator):
#
# The == operator is used for comparison. It checks whether two values are equal.
# When you use ==, you are asking Python to compare the values on both sides and return True
# if they are equal, or False if they are not equal.
# Example:
# python
# Copy code
# x == 5  # Checks if the value of x is equal to 5 and returns a boolean (True or False)


##@@@What does the ** operator do in Python, and how is it used?


# In Python, the ** operator is used for exponentiation. It raises a number to a specified power.
# This operator is also called the "power operator." Here's how it works:
#
# python
# Copy code
# base ** exponent
# base is the number you want to raise to a power.
# exponent is the power to which you want to raise the base.
# Here's an example of how the ** operator is used:
#
# python
# Copy code
# x = 2
# y = 3
#
# result = x ** y  # This raises 2 to the power of 3, which is 8
# In this example, x ** y results in 8 because 2 raised to the power of 3 is 8.
#
# You can also use the ** operator with fractional or decimal exponents:
#
# python
# Copy code
# x = 4
# y = 0.5
#
# result = x ** y  # This calculates the square root of 4, which is 2.0
# In this example, x ** y calculates the square root of 4, which is 2.0.
#
# The ** operator is a versatile tool for performing exponentiation in Python,
# and it can be used with both integers and floating-point numbers.


#@@##What does the ^ operator do in Python, and in what context is it commonly used?

# In Python, the ^ operator is the bitwise XOR (exclusive or) operator.
# It is used to perform bitwise XOR operations on individual bits of integers. Here's how it works:
#
# When you apply the ^ operator to two integers,it compares each corresponding pair of bits in their binary representations.
# If the bits are different, it results in a 1; if the bits are the same, it results in a 0.
# The result is a new integer with the bitwise XOR of the two operands.
#
# For example:
#
# python
# Copy code
# a = 5  # Binary: 0101
# b = 3  # Binary: 0011
#
# result = a ^ b  # Binary result: 0110 (Decimal: 6)
# Common use cases for the ^ operator in Python include:
#
# Bit Manipulation: It's used for various bit manipulation tasks, like toggling specific bits,
# flipping bits, or checking for the differences between two binary numbers.
#
# Cryptographic Operations: Bitwise XOR can be used in cryptographic algorithms and hash functions to provide data security and integrity.
#
# Flags and Permissions: Bitwise XOR is sometimes used to manipulate and check individual flags or permissions in bit fields.
#
# Error Detection and Correction: In some cases,
# bitwise XOR can be used in error detection and correction algorithms.
#
# Random Number Generation: XOR'ing bits with a random bit sequence can be used to generate pseudo-random numbers.
#
# Data Encoding: In some encoding schemes, bitwise XOR is used to encode or decode data.
#
# It's important to note that the ^ operator should not be confused with the exponentiation operator (**),
# which is used for raising a number to a power in Python.


#Write a Python program to calculate the area of a circle given its radius using the formula
#       area=Ï€Ã—r^2 ( Take pie as 3.14)

# Define the value of pi
pi = 3.14

# Input the radius from the user
radius = float(input("Enter the radius of the circle: \n"))

# Calculate the area of the circle
area = pi * (radius ** 2)

# Display the result
print(f"The area of the circle with radius {radius} \n is {area:.2f}")


#Create a program that takes two numbers as input and prints whether the first number is greater than, less than, or equal to the second number.
# Input the two numbers
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

# Compare the numbers
if num1 > num2:
    print(f"{num1} is greater than {num2}")
elif num1 < num2:
    print(f"{num1} is less than {num2}")
else:
    print(f"{num1} is equal to {num2}")


#Use the ternary operator to find the maximum of three numbers entered by the user.
# Develop a Python script that calculates the square and cube of a given number.

# Input from the user
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
num3 = float(input("Enter the third number: "))
input_number = float(input("Enter a number to find its square and cube: "))

# Using the ternary operator to find the maximum
max_num = num1 if (num1 >= num2 and num1 >= num3) else (num2 if num2 >= num3 else num3)
print(f"The maximum number among {num1}, {num2}, and {num3} is: {max_num}")

# Calculate square and cube
square = input_number ** 2
cube = input_number ** 3

print(f"The square of {input_number} is: {square}")
print(f"The cube of {input_number} is: {cube}")
